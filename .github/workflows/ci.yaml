name: bloki ci

on:
  push:
    branches:
      - master
      - next
  release:
    types: [created]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      IS_RELEASE: github.event_name == 'release' && github.event.action == 'created'
      TARGET_NAME: ${{ (github.event_name == 'release' && github.event.action == 'created') && 'bloki.app' || format('{0}.bloki.app', github.ref_name) }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: install node
        uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: install pnpm
        uses: pnpm/action-setup@v2
        id: pnpm-install
        with:
          version: latest
          run_install: false

      - name: get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('./pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: pnpm install
        run: pnpm i --frozen-lockfile

      - name: setup cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./api/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('./api/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          # components: rustfmt, clippy

      # - name: install pw browsers
      #   if: ${{ env.IS_RELEASE }}
      #   working-directory: ./tests
      #   run: pnpx playwright install --with-deps

      # - name: run tests
      #   if: ${{ env.IS_RELEASE }}
      #   run: pnpm test

      - name: build all
        run: pnpm build

      - name: setup ssh
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSHKEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat >>~/.ssh/config <<END
          Host vps
            HostName ${{ secrets.HOST }}
            User ${{ secrets.USERNAME }}
            IdentityFile ~/.ssh/id_rsa
            Port ${{ secrets.PORT }}
            StrictHostKeyChecking no
            ConnectTimeout 10
          END

      - name: scp build
        run: |
          scp -rC ./dist/* vps:~/deployment/${{ env.TARGET_NAME }}
          scp ./misc/systemd/${{ env.TARGET_NAME }}.service vps:~/.config/systemd/user/
          scp ./misc/nginx/${{ env.TARGET_NAME }}.conf vps:/etc/nginx/sites/

      - name: restart nginx and systemd
        run: |
          ssh vps 'sudo nginx -s reload'
          ssh vps 'systemctl --user reenable ${{ env.TARGET_NAME }} && systemctl --user restart ${{ env.TARGET_NAME }}'

      - name: notify telegram
        env:
          TG_KEY: ${{ secrets.TG_KEY }}
          TG_CHANNEL: ${{ secrets.TG_CHANNEL }}
        run: pnpm run -F tg start
